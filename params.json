{"name":"Zist","tagline":"Think supervisord with remote commandeering via RPC.","body":"# **zist**\r\n[![Build Status](https://travis-ci.org/ziscky/zist.svg?branch=master)](https://travis-ci.org/ziscky/zist)\r\n\r\n#Think supervisord plus remote commandeering via rpc\r\n------------------------------------------------------------------------\r\n\r\n##Supervisor functions\r\nRegister processes to be started and monitored in a familiar way using an easy to write toml file.\r\nSample: (Check Below)\r\n\r\n\r\n## Live Process Interaction via web API and RPC client\r\n - View process stats i.e cpu/mem usage\r\n - Start/Stop/Restart a process\r\n - Detach a process to allow it to run without zist supervision\r\n - View a list of all managed processes and valuable information e.g\r\n  *[{\"isalive\":true,\"name\":\"xm\",\"numrestarts\":1,\"path\":\"/home/eziscky/Golang/src/github.com/ziscky/tests/xm\",\"pid\":2067,\"timealive\":\"13.410013177s\",\"timestarted\":\"2015-12-17 13:36:44.540403109 +0300 EAT\"}]*\r\n - Get stdout/stderr process logs and log files.\r\n\r\n##Process Detach\r\n - If you don't like the *coupling of your proc's instance with zist* you\r\n   can simply detach it after you're done monitoring it\r\n**N.B** *Process Detach is only supported for direct invocation of binaries. So if you run a sh script, I'm working to support that. Or just send in a pull request :)*\r\n\r\n#FUTURE\r\n - Live process hijacking.\r\n \r\n #USAGE\r\n ---------------------------------------------------------------------------------------------\r\n \r\n##Installation\r\n\r\n###Building from source\r\nYou will need to install Go (*https://golang.org*)\r\nYou can clone this repo: *https://github.com/ziscky/zist* or use go get *github.com/ziscky/zist*\r\nIn the zist directory run the bash script *build.sh*\r\nRun *sudo zist install*, or not *sudo* if you have correct permissions for:\r\n        - /usr/bin\r\n        - /etc \r\nOn installation zistd and zistcl will be installed in */usr/bin*. Typically for remote administration all you need on the server is zistd.\r\n\r\n###Configuration\r\nConfigurations are stored in */etc/zist*\r\n\r\nThe file of interest is */etc/zist/conf.toml*\r\n\r\nIt typically looks like this:\r\n    - Maintain quotes for strings.\r\n           \r\n    Confdir = \"/etc/zist/conf.d\"\r\n    Web = true\r\n    Protocol = \"http\"\r\n    HTTPPort = 7000\r\n    Token = \"zis\"\r\n    RPCPort = 9876\r\n\r\nThese are the defaults.\r\n\r\n    - Confdir: where zistd will look for process config files\r\n    - Web: if zistd will render process information via the web API\r\n    - Protocol: http or https\r\n    - HTTPPort: where the web API server will listen\r\n    - RPCPort: where the rpc server will listen\r\n    - Token: used to secure API/RPC connections\r\n\r\nA few gotchas:\r\n    - Strings in the config file should be in quotation. View *https://github.com/toml-lang/toml* for more on toml.\r\n    - For https you have to provide the keyfile and certfile when running zist\r\n    \r\nPut your app config files in the Confdir directory specified in *conf.toml*\r\n    - Each app/process/script must have its own file\r\n    - The name of the file does not matter\r\n    \r\n    Name = \"name of the process.(no spaces or special chars)\"\r\n    Path = \"/path/to/process\"\r\n    Args = \"-your -app -args\"\r\n    Restart = true/false\r\n    Web = true/false \r\n    \r\n\r\n###Running\r\nRun it with *nohup zistd &* to run it in the background.\r\nTo generate a secure token:\r\n    - Run *zistd generate*\r\n    - Copy the token to your config file\r\n\r\n###Interaction\r\n\r\nThere are 2 ways to interact with a running zistd instance.\r\n####1. zistcl\r\n       zistcl is a commandline tool to interact with zistd.(Kinda like supervisord supervisorctl relationship)\r\n       *You can get the following info and more by running zistcl -h*\r\n       To connect to a zistd instance:\r\n            *zistcl host:port token [cmd]* for remote connection to zistd\r\n            *zistcl -l [cmd]* for local connection\r\n            \r\n            Examples:\r\n            zistcl 1.1.1.1:9876 mysecuretoken status //Get zistd status\r\n            zistcl -l log //get zistd log output\r\n            zistcl -l app1 status //get app1 status\r\n            zistcl 1.1.1.1:9876 mysecuretoken  app1 detach\r\n\r\n\r\n####2. Web API\r\n        Here are the API routes:\r\n        Output is standard JSON.\r\n                host:port/{token} -> Gets All the monitored process info, including pid that can be used in the below requests \r\n                host:port/{token}/{pid}/stats\r\n                host:port/{token}/{pid}/kill \r\n                host:port/{token}/{pid}/start\r\n                host:port/{token}/{pid}/restart\r\n                host:port/{token}/{pid}/stdout\r\n                host:port/{token}/{pid}/stderr\r\n                host:port/{token}/{pid}/detach\r\n\r\n#NOTE\r\n    - Beta software do not use in prod\r\n    - Feel free to contribute\r\n    - Tell me what you do with it\r\n    - Works on Linux only","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}